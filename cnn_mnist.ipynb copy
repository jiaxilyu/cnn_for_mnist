{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 28, 28, 1)\n",
      "Epoch 1/5\n",
      "30/30 [==============================] - 26s 880ms/step - loss: 26.2412 - accuracy: 0.7246\n",
      "Epoch 2/5\n",
      "30/30 [==============================] - 25s 845ms/step - loss: 0.9205 - accuracy: 0.9360\n",
      "Epoch 3/5\n",
      "30/30 [==============================] - 24s 789ms/step - loss: 0.3400 - accuracy: 0.9535\n",
      "Epoch 4/5\n",
      "30/30 [==============================] - 27s 887ms/step - loss: 0.1991 - accuracy: 0.9641\n",
      "Epoch 5/5\n",
      "30/30 [==============================] - 24s 800ms/step - loss: 0.1405 - accuracy: 0.9710\n",
      "accuracy of my cnn in mnist test sets is 0.966200\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras import optimizers\n",
    "from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D\n",
    "from tensorflow.keras.datasets import mnist\n",
    "import numpy as np\n",
    "\n",
    " #filters: Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution).\n",
    "        #When using this layer as the first layer in a model, provide the keyword \n",
    "        #argument input_shape (tuple of integers, does not include the sample axis), e.g. input_shape=(128, 128, 3) for 128x128 RGB pictures in data_format=\"channels_last\".\"\"\"\n",
    "        #kernel_size: An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window.\"\"\"\n",
    "        #strides: An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions\n",
    "        #strides:forward step size in x,y, if (2,1) f(01 02) then f(03 04)\n",
    "        #if (1,1) f(01 02) then f(02 03)\n",
    "\n",
    "\n",
    "#define the first cnn network\n",
    "#a cnn network with 2 convolution layer with max pool\n",
    "#1st con layer with a 5x5 kernel matrix\n",
    "#max pool, pooling max form each 2x2 matrix, strides(2,2)\n",
    "#2nd con layer with a 5x5 kernel matrix and using max pool, strides(2,2)\n",
    "#max pool, strides(2,2)\n",
    "#flattern the con layer output\n",
    "#dense layer with 512 hidden units\n",
    "#output layer, choose softmax, each output reprsent the possibility of cooresponding digit\n",
    "def build_cnn1(input_shape, output_size):\n",
    "    model = Sequential()\n",
    "    model.add(Conv2D(filters= 32, input_shape=input_shape, kernel_size=(5,5),strides=(1, 1)))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2),strides=(2, 2)))\n",
    "    model.add(Conv2D(filters= 64, kernel_size=(5,5), strides=(1, 1)))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2),strides=(1, 1)))\n",
    "    #here is nn\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(512,activation='relu'))\n",
    "    model.add(Dense(output_size,activation='softmax'))\n",
    "    model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "#dealing with data\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "x_train = x_train.reshape([-1,28,28,1])\n",
    "x_test = x_test.reshape([-1,28,28,1])\n",
    "input_shape = (x_train.shape[0],x_train.shape[1],1)\n",
    "print(x_train.shape)\n",
    "output_size = 10\n",
    "#construct y_train\n",
    "Y = np.zeros((output_size, x_train.shape[0]),dtype=np.float64)\n",
    "for i in range(x_train.shape[0]):\n",
    "    Y[y_train[i],i] = 1\n",
    "Y = Y.T\n",
    "\n",
    "cnn1 = build_cnn1((28,28,1), output_size)\n",
    "cnn1.fit(x_train,Y, batch_size = 2000 ,epochs=5)\n",
    "\n",
    "predictions = cnn1.predict(x_test)\n",
    "currect = 0\n",
    "for i in range(x_test.shape[0]):\n",
    "    label = y_test[i]\n",
    "    #pick up most likely number\n",
    "    prediction = np.argmax(predictions[i])\n",
    "    if prediction == int(label):\n",
    "        currect += 1\n",
    "print(\"accuracy of my cnn in mnist test sets is %f\"%(currect/x_test.shape[0]))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
